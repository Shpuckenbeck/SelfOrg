@model SelfOrg.Models.CommentViewModel

    @{
        ViewData["Title"] = Model.post.PostName;
    }

  


<div>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.post.PostName)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.post.PostName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.post.User)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.post.User.displayedname)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.post.Category)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.post.Category.CatName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.post.content)
        </dt>
        <dd>
            @Html.Raw(Model.post.content)
        </dd>
        <dt>
            @Html.DisplayNameFor(model => model.post.PostDate)
        </dt>
        <dd>
            @Html.DisplayFor(model => model.post.PostDate)
        </dd>
        <dt>
            Теги
        </dt>
        <dd>
            <p>@await Component.InvokeAsync("PostTags", new { id = Model.post.PostID })</p>
        </dd>
    </dl>
    
    <hr />
</div>
<div>
<h4>Есть что добавить?</h4>
<form asp-action="viewpost" asp-controller="Comments" method="post" enctype="multipart/form-data">

    <div class="form-group">
        <div class="col-md-10">
            <textarea name="comment" ></textarea>
        </div>
    </div>
    <div class="form-group">
        <div class="col-md-10">
            <input type="submit" value="Оставить комментарий" />
        </div>
    </div>
</form>
</div>

<div>
    @foreach (Comment item in Model.comments)
    {

        <div id="comment-@item.CommentId">     
                @Html.DisplayFor(modelItem => item.User.displayedname) написал         
                @Html.DisplayFor(modelItem => item.CommentDate) :
            <br />
            @Html.Raw(@item.Text)        
        <input type="button" id="replybut" value="Ответить" onclick="replyto(@item.CommentId)" />
            </div>
        @*<div id="replydiv-@item.CommentId"></div>*@
      
    }
    </div>

@section Scripts {
    @{
        <script src="~/lib/jquery/dist/jquery.min.js"></script>
        <script type="text/javascript" src="~/js/tinymce/tinymce.min.js"></script>
        <script>
tinymce.init({
                theme: "modern",
                selector: 'textarea',
                branding: false,
                width: 550,
                height: 90,
                language: 'ru',
                menubar: false,
                plugins: [
                    'advlist autolink lists link image charmap print preview anchor',
                    'searchreplace visualblocks code fullscreen',
                    'insertdatetime media textcolor colorpicker contextmenu paste code'
                ],
                toolbar: 'undo redo | insert | styleselect | bold italic | alignleft aligncenter alignright alignjustify | forecolor backcolor | bullist numlist outdent indent | link image',
                image_title: true,
                // enable automatic uploads of images represented by blob or data URIs
                automatic_uploads: true,
                // URL of our upload handler (for more details check: https://www.tinymce.com/docs/configure/file-image-upload/#images_upload_url)
                images_upload_url: 'postAcceptor.php',
                // here we add custom filepicker only to Image dialog
                file_picker_types: 'image',
                // and here's our custom image picker
                file_picker_callback: function (cb, value, meta) {
                    var input = document.createElement('input');
                    input.setAttribute('type', 'file');
                    input.setAttribute('accept', 'image/*');

                    // Note: In modern browsers input[type="file"] is functional without
                    // even adding it to the DOM, but that might not be the case in some older
                    // or quirky browsers like IE, so you might want to add it to the DOM
                    // just in case, and visually hide it. And do not forget do remove it
                    // once you do not need it anymore.

                    input.onchange = function () {
                        var file = this.files[0];

                        var reader = new FileReader();
                        reader.readAsDataURL(file);
                        reader.onload = function () {
                            // Note: Now we need to register the blob in TinyMCEs image blob
                            // registry. In the next release this part hopefully won't be
                            // necessary, as we are looking to handle it internally.
                            var id = 'blobid' + (new Date()).getTime();
                            var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                            var blobInfo = blobCache.create(id, file, reader.result);
                            blobCache.add(blobInfo);

                            // call the callback and populate the Title field with the file name
                            cb(blobInfo.blobUri(), { title: file.name });
                        };
                    };

                    input.click();
                },
                content_css: '//www.tinymce.com/css/codepen.min.css'

            });</script>
            <script>


                var replyto = function (commentid) {
                    var whatever = commentid;
        var div = document.createElement('div');

        div.className = 'row';
                div.innerHTML = '<textarea name="comment"/></textarea>\
            <br />\
        <input type="hidden" name="commentid" value='+ whatever +'>\
         \
        <input type="button" value="Ответ" >';
                var name = "comment-" + whatever;
                document.getElementById(name).appendChild(div);


    }
            </script>
        //var output = new Object();
        //output.CommentId = commentid;
        //console.log(output.CommentId);
        //$.ajax({
        //    headers: {
        //        'Accept': 'application/json',
        //        'Content-Type': 'application/json'
        //    },
        //    type: "GET",
        //    url: "/Comments/reply/",
        //    data: JSON.stringify(output),
        //    success: function (result)
        //    {
        //        $("#replydiv").html(response);
        //        $("#replydiv").modal(show);
        //    }
        //})


        await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}

