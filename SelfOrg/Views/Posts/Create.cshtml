@model SelfOrg.Models.PostViewModel

@{
    ViewData["Title"] = "Создание поста";
}

<h2>Новый пост</h2>

<form asp-action="Create">
    <div class="form-horizontal">
        
        <hr />
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <label asp-for="Name" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Text" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <textarea asp-for="Text"></textarea>
                <span asp-validation-for="Text" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Cat" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <select asp-for="Cat" class ="form-control" asp-items="ViewBag.CategoryId"></select>
            </div>
        </div>
        <div class="form-group">
            <label asp-for="Tags" class="col-md-2 control-label"></label>
            <div class="col-md-10">
                <input asp-for="Tags" class="form-control" />
                <span asp-validation-for="Tags" class="text-danger"></span>
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Создать" class="btn btn-default" />
            </div>
        </div>
    </div>
</form>

<div>
    <a asp-action="Index">Назад</a>
</div>

@section Scripts {
    @{
        <script type="text/javascript" src="~/js/tinymce/tinymce.min.js"></script>
        <script>tinymce.init({
                theme: "modern",
                selector: 'textarea',
                branding: false,
                width: 650,
                height: 500,
                language: 'ru',
                menubar: 'edit insert view format table ',
                plugins: [
                    'advlist autolink lists link image charmap print preview anchor',
                    'searchreplace visualblocks code fullscreen',
                    'insertdatetime media table textcolor colorpicker contextmenu paste code'
                ],
                toolbar: 'undo redo | insert | styleselect | bold italic | alignleft aligncenter alignright alignjustify | forecolor backcolor | bullist numlist outdent indent | table link image',
                image_title: true,
                // enable automatic uploads of images represented by blob or data URIs
                automatic_uploads: true,
                // URL of our upload handler (for more details check: https://www.tinymce.com/docs/configure/file-image-upload/#images_upload_url)
                images_upload_url: 'postAcceptor.php',
                // here we add custom filepicker only to Image dialog
                file_picker_types: 'image',
                // and here's our custom image picker
                file_picker_callback: function (cb, value, meta) {
                    var input = document.createElement('input');
                    input.setAttribute('type', 'file');
                    input.setAttribute('accept', 'image/*');

                    // Note: In modern browsers input[type="file"] is functional without 
                    // even adding it to the DOM, but that might not be the case in some older
                    // or quirky browsers like IE, so you might want to add it to the DOM
                    // just in case, and visually hide it. And do not forget do remove it
                    // once you do not need it anymore.

                    input.onchange = function () {
                        var file = this.files[0];

                        var reader = new FileReader();
                        reader.readAsDataURL(file);
                        reader.onload = function () {
                            // Note: Now we need to register the blob in TinyMCEs image blob
                            // registry. In the next release this part hopefully won't be
                            // necessary, as we are looking to handle it internally.
                            var id = 'blobid' + (new Date()).getTime();
                            var blobCache = tinymce.activeEditor.editorUpload.blobCache;
                            var blobInfo = blobCache.create(id, file, reader.result);
                            blobCache.add(blobInfo);

                            // call the callback and populate the Title field with the file name
                            cb(blobInfo.blobUri(), { title: file.name });
                        };
                    };

                    input.click();
                },
                content_css: '//www.tinymce.com/css/codepen.min.css'

            });</script>
        await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
